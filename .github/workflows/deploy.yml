name: Deploy FastAPI to Azure Function

on:
  push:
    branches:
      - staging
      - main

env:
  LOCATION: eastus
  PYTHON_VERSION: "3.10"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Normalize Names (storage account and function app)
      id: vars
      run: |
        CLEAN_NAME=$(echo "${{ github.ref_name }}" | tr -cd '[:alnum:]' | tr '[:upper:]' '[:lower:]')
        echo "CLEAN_NAME=$CLEAN_NAME" >> $GITHUB_OUTPUT
        echo "AZURE_RESOURCE_GROUP=rg-fastapi-$CLEAN_NAME" >> $GITHUB_ENV
        echo "FUNCTION_APP_NAME=fastapifunc$CLEAN_NAME" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=fastapistore$CLEAN_NAME" >> $GITHUB_ENV

    - name: Create Resource Group (idempotent)
      run: |
        az group create \
          --name $AZURE_RESOURCE_GROUP \
          --location $LOCATION
    
    - name: Debug AZURE_CREDENTIALS (subscriptionId only)
      run: |
        echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId'
    

    - name: Check if AZURE_CREDENTIALS is valid JSON
      run: |
        echo '${{ secrets.AZURE_CREDENTIALS }}' | jq type

    - name: Check if Storage Account exists
      id: check_storage
      run: |
        if az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group $AZURE_RESOURCE_GROUP &> /dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Storage Account (if not exists)
      if: steps.check_storage.outputs.exists == 'false'
      run: |
        az storage account create \
          --name $STORAGE_ACCOUNT_NAME \
          --resource-group $AZURE_RESOURCE_GROUP \
          --location $LOCATION \
          --sku Standard_LRS \
          --kind StorageV2 \
          --access-tier Hot

    - name: Check if Function App exists
      id: check_func
      run: |
        if az functionapp show --name $FUNCTION_APP_NAME --resource-group $AZURE_RESOURCE_GROUP &> /dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Function App (if not exists)
      if: steps.check_func.outputs.exists == 'false'
      run: |
        az functionapp create \
          --name $FUNCTION_APP_NAME \
          --storage-account $STORAGE_ACCOUNT_NAME \
          --resource-group $AZURE_RESOURCE_GROUP \
          --runtime python \
          --runtime-version $PYTHON_VERSION \
          --functions-version 4 \
          --os-type Linux \
          --consumption-plan-location $LOCATION

    - name: Set Environment Variables
      run: |
        az functionapp config appsettings set \
          --name $FUNCTION_APP_NAME \
          --resource-group $AZURE_RESOURCE_GROUP \
          --settings ENV=${{ github.ref_name }}

    - name: Deploy Code to Azure Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.FUNCTION_APP_NAME }}
        package: .
